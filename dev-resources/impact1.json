{
  "data": {
    "ParentImpact": [
      {
        "id": "T095SFFBK_132103296d7a686afc27c206378e469fef1df778",
        "data": "[[\"api\",0],[\"defstate\",1],[\"defns\",1],[\"build\",0],[\"lein\",0]]",
        "commit": {
          "sha": "132103296d7a686afc27c206378e469fef1df778",
          "fingerprints": [
            {
              "sha": "d6751a4569ba184e20bb1d9a73cd4066a5f805d747b46688bfe2fd48fd161f9b",
              "data": "[]",
              "name": "api"
            },
            {
              "sha": "7e5a213a920475e5e184057c83db66e7622e3e84585bff70fa09dc09bb484dc4",
              "data": "[\"sqs-init\",\"kafka-service\",\"dynamo-init\",\"neo-incoming!\",\"automation-registration-events\",\"metrics\",\"env\",\"kalapas-config\",\"internal-http-server\",\"consumer-command-handler-request\",\"system-events\"]",
              "name": "defstates"
            },
            {
              "sha": "a07b4e507d76d533ee209851b8064388233dac3d4b7123bf230b2c1b7c003398",
              "data": "[\"unparse[document]\",\"domain-prefix*[]\",\"creds*[]\",\"creds[]\",\"bad-credential-error?[e]\",\"retryable-aws-error?[e]\",\"on-failed-attempt-fn[retry-same-cred]\",\"remove-nils[m]\",\"conform-tag-vals[tags]\",\"tag-queue[queue tags]\",\"create-queue[queue-name & [tags]]\",\"delete-queue[queue-url]\",\"send-message[queue-url :- s\\/Str msg :- s\\/Str]\",\"init[]\",\"init-transformations[]\",\"perform-transformations[thingy :- {s\\/Keyword s\\/Any} tipe :- s\\/Keyword][thingy :- {s\\/Keyword s\\/Any} tipe :- s\\/Keyword event :- (s\\/maybe AtLeastTeamId)]\",\"transform-response[response :- {s\\/Keyword s\\/Any} query :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"root-field[query :- {s\\/Keyword s\\/Any}]\",\"operation-name[subscription :- s\\/Any]\",\"parse-graphql[query :- (s\\/maybe s\\/Str)]\",\"fill-variables[query :- {s\\/Keyword s\\/Any} variables :- (s\\/maybe {s\\/Keyword s\\/Any})]\",\"run-internal-query[query :- {s\\/Keyword s\\/Any}][query :- {s\\/Keyword s\\/Any} variables :- (s\\/maybe s\\/Str)]\",\"neo-schema-query*[query :- {s\\/Keyword s\\/Any}]\",\"transform-neo-schema[team-id :- (s\\/maybe s\\/Str)]\",\"run-query[query :- {s\\/Keyword s\\/Any}][query :- {s\\/Keyword s\\/Any} variables :- (s\\/maybe {s\\/Keyword s\\/Any})][parsed :- {s\\/Keyword s\\/Any} variables :- (s\\/maybe {s\\/Keyword s\\/Any}) {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"alumbra-error->graphql[error :- {s\\/Keyword s\\/Any}]\",\"graphql-error[message :- s\\/Str code :- s\\/Num]\",\"schema-error[info :- {s\\/Keyword s\\/Any}]\",\"handle-team-graphql[request]\",\"handle-graphql[request]\",\"new-consumer[component topic handler][component topic handler group-id]\",\"new-producer[component topic]\",\"table*[table-name]\",\"creds*[]\",\"creds[]\",\"retryable-aws-error?[e]\",\"on-failed-attempt-fn[retry-same-cred]\",\"consistent-hash[edn]\",\"get-item[t m]\",\"update-item[t k update]\",\"with-timestamps[item]\",\"put-item[t item]\",\"delete-item[t m]\",\"query[t q & [opts]]\",\"scan[t]\",\"ensure-table[{table-name :table, :as table-spec, :keys [hash-keydef]}]\",\"ensure-tables[& [tables*]]\",\"team-ingesters[team-id :- (s\\/maybe s\\/Str)]\",\"build-query[ingester :- Ingester]\",\"build-subscription[ingester :- Ingester]\",\"add-id-fields[ingester :- Ingester]\",\"^:schema-transform add-ingestion-schemata[schema :- {s\\/Keyword s\\/Any} {:keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"team-query[query-name :- s\\/Str team-id :- s\\/Str]\",\"team-type[type-name :- (s\\/maybe s\\/Str) team-id :- (s\\/maybe s\\/Str)]\",\"apply-query[selection :- s\\/Any full-response :- s\\/Any][selection :- s\\/Any full-response :- s\\/Any response :- s\\/Any]\",\"composite?[field :- {s\\/Keyword s\\/Any}]\",\"sha[edn :- s\\/Any]\",\"composite-key[s\\/Any]\",\"calculate-id[type-name :- s\\/Str event :- {s\\/Keyword s\\/Any}]\",\"^:query-transform build-response[query :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"^:schema-transform fixup-schema[results :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"parse-properties[props :- s\\/Str]\",\"^:results-transform  transform-response[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"^:query-transform transform-query[query :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"^:results-transform remove-nulls[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"^:schema-transform fixup-schema[results :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"get-item![team-id :- s\\/Str]\",\"put-item[item]\",\"^:results-transform transform-response[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"^:query-transform transform-query[query :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"^:schema-transform remove-cypher-directives[results :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"^:schema-transform add-custom-directives[results :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"^:query-transform remove-directives[query :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"^:results-transform required-leaf-directive[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"^:results-transform required-array-directive[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"^:results-transform not-equals-directive[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"^:results-transform re-matches-directive[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"sub-types[{s\\/Keyword s\\/Any}]\",\"object-types[{s\\/Keyword s\\/Any}]\",\"enum-types[{s\\/Keyword s\\/Any}]\",\"type->str[field-or-arg]\",\"field->str[field :- {s\\/Keyword s\\/Any}]\",\"object-type->str[tipe :- {s\\/Keyword s\\/Any}]\",\"enum->str[tipe :- {s\\/Keyword s\\/Any}]\",\"directive->str[directive :- {s\\/Keyword s\\/Any}]\",\"json-schema->idl*[json-schema :- {s\\/Keyword s\\/Any}]\",\"analyzed-schema*[neo-idl :- s\\/Str]\",\"validate-document*[neo-schema :- {s\\/Keyword s\\/Any} document :- {s\\/Keyword s\\/Any} variables :- {s\\/Str s\\/Any}]\",\"canonicalize-operation[query :- {s\\/Keyword s\\/Any} neo-schema :- {s\\/Keyword s\\/Any}][query :- {s\\/Keyword s\\/Any} neo-schema :- {s\\/Keyword s\\/Any} variables :- (s\\/maybe {s\\/Keyword s\\/Any})]\",\"query-zipper[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any}]\",\"visit-type[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any} type-name :- s\\/Str visitor-fn]\",\"createSlackChannel[channel :- s\\/Str team-id :- s\\/Str]\",\"joinSlackChannel[channel-id :- s\\/Str team-id :- s\\/Str]\",\"linkSlackChannel[channel-id :- s\\/Str team-id :- s\\/Str repo :- s\\/Str owner :- s\\/Str provider-id :- s\\/Str]\",\"unlinkSlackChannel[channel-id :- s\\/Str team-id :- s\\/Str repo :- s\\/Str owner :- s\\/Str provider-id :- s\\/Str]\",\"inviteUserToSlackChannel[channel-id :- s\\/Str team-id :- s\\/Str user-id :- s\\/Str]\",\"^:schema-transform fixup-schema[results :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"^:schema-transform add-subscriptions[results :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"^:query-transform add-node-id[query :- {s\\/Keyword s\\/Any} {:as event, :keys [id]} :- (s\\/maybe AtLeastTeamId)]\",\"mutation?[query :- {s\\/Keyword s\\/Any}]\",\"^:schema-transform remove-mutations[results :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"^:schema-transform remove-team-id[results :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"^:query-transform ensure-team-id[query :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"^:results-transform strip-team-id[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"^:private custom-type[query :- (s\\/maybe {s\\/Keyword s\\/Any})]\",\"^:schema-transform fixup-schema[results :- {s\\/Keyword s\\/Any} event :- (s\\/maybe {s\\/Keyword s\\/Any})]\",\"^:query-transform transform-query[query :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"^:results-transform transform-response[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"parse-subs[reg]\",\"fetch-registrations[Registration]\",\"fetch-registrations*[]\",\"reset[state]\",\"all-registrations[]\",\"latest-registrations[registrations]\",\"refresh-registrations[]\",\"increment[n-or-ns][n-or-ns tags]\",\"gauge[n-or-ns][n-or-ns v][n-or-ns v tags]\",\"timing[n-or-ns v][n-or-ns v tags]\",\"get-value[config-keys & default]\",\"curt[reg-or-regs]\",\"can-handle-team?[team-id :- (s\\/maybe s\\/Str) registration :- Registration]\",\"by-team[reg1 :- Registration reg2 :- Registration]\",\"effective-team-registrations[Registration]\",\"find-command[{command-name :name, :keys [type registration_name version]} registration :- Registration]\",\"find-registration[{:as command-handler-request, {team-id :id} :team, {:as coordinate, :keys [type]} :rug}]\",\"matching-subscription?[system-event :- {s\\/Keyword s\\/Any} event-subscription :- {s\\/Keyword s\\/Any}]\",\"find-subscribers[GraphQLSubscription]\",\"subscription-results[QueryResponse]\",\"schema-error[errors :- [{s\\/Keyword s\\/Any}]]\",\"validate[registration :- Registration team-id :- s\\/Str]\",\"stop-app[]\",\"-main[& args]\",\"dispatch-command[command-request]\",\"process-event[event]\"]",
              "name": "public-defns"
            },
            {
              "sha": "bb990feb714a08d01298856358d0d65086bd10031ee82186dcd37413fa61485c",
              "data": null,
              "name": "build-config"
            },
            {
              "sha": "e033913517d87fed210801bd17efe9a6935975d273eccc4493ce46287b71744b",
              "data": "[[\"amazonica\",\"0.3.114\"],[\"analyzer\",\"0.1.17\"],[\"clj-config\",\"13.1.1-20170602194707\",\"exclusions\",[\"clojure\",\"slf4j-log4j12\"]],[\"clj-statsd\",\"0.4.0\"],[\"clj-utils\",\"0.0.8\"],[\"clojure\",\"1.8.0\"],[\"compojure\",\"1.6.0\"],[\"cprop\",\"0.1.11\"],[\"diehard\",\"0.6.0\"],[\"faraday\",\"1.9.0\",\"exclusions\",[\"nippy\",\"aws-java-sdk-dynamodb\"]],[\"hasch\",\"0.3.4\"],[\"jcl-over-slf4j\",\"1.7.25\"],[\"jul-to-slf4j\",\"1.7.25\"],[\"kafka-lib\",\"4.0.0\",\"exclusions\",[\"clojure\",\"slf4j-log4j12\",\"slf4j-api\"]],[\"log4j-over-slf4j\",\"1.7.25\"],[\"logback-classic\",\"1.2.3\"],[\"logging\",\"0.8.1\",\"exclusions\",[\"tools.logging\"]],[\"logzio-logback-appender\",\"1.0.16\"],[\"luminus-http-kit\",\"0.1.4\"],[\"mount\",\"0.1.11\"],[\"parser\",\"0.1.7\"],[\"ring-core\",\"1.6.2\"],[\"ring-cors\",\"0.1.11\"],[\"ring-defaults\",\"0.3.1\"],[\"ring-http-response\",\"0.9.0\"],[\"ring-middleware-format\",\"0.7.2\"],[\"slf4j-api\",\"1.7.25\"],[\"specter\",\"1.0.3\"],[\"validator\",\"0.2.1\"]]",
              "name": "project-deps"
            }
          ],
          "repo": {
            "name": "pochta",
            "org": {
              "owner": "atomisthq",
              "ownerType": "organization"
            },
            "channels": [
              {
                "channelId": "C7Z9PKNFM",
                "name": "pochta"
              }
            ]
          }
        },
        "commits": [
          {
            "sha": "0f612486c8e60a68cde621e166952927239ba66e",
            "fingerprints": [
              {
                "sha": "d6751a4569ba184e20bb1d9a73cd4066a5f805d747b46688bfe2fd48fd161f9b",
                "data": "[]",
                "name": "api"
              },
              {
                "sha": "04cb62573cc0425772ae155067a9f08e9afb68742e5ee1f643e0a12fa53ec6c4",
                "data": "[\"sqs-init\",\"metrics\",\"consumer-command-handler-request\",\"env\",\"kalapas-config\",\"neo-incoming!\",\"system-events\",\"automation-registration-events\",\"kafka-service\",\"dynamo-init\",\"internal-http-server\"]",
                "name": "defstates"
              },
              {
                "sha": "10a7a6128c6b99f1d194fa2e680ed7209a4ab939544355aeb79aaee793579f53",
                "data": "[\"domain-prefix*[]\",\"creds*[]\",\"creds[]\",\"bad-credential-error?[e]\",\"retryable-aws-error?[e]\",\"on-failed-attempt-fn[retry-same-cred]\",\"remove-nils[m]\",\"conform-tag-vals[tags]\",\"tag-queue[queue tags]\",\"create-queue[queue-name & [tags]]\",\"delete-queue[queue-url]\",\"send-message[queue-url :- s\\/Str msg :- s\\/Str]\",\"init[]\",\"increment[n-or-ns][n-or-ns tags]\",\"gauge[n-or-ns][n-or-ns v][n-or-ns v tags]\",\"timing[n-or-ns v][n-or-ns v tags]\",\"dispatch-command[command-request]\",\"curt[reg-or-regs]\",\"can-handle-team?[team-id :- (s\\/maybe s\\/Str) registration :- Registration]\",\"by-team[reg1 :- Registration reg2 :- Registration]\",\"effective-team-registrations[Registration]\",\"find-command[{command-name :name, :keys [type registration_name version]} registration :- Registration]\",\"find-registration[{:as command-handler-request, {team-id :id} :team, {:as coordinate, :keys [type]} :rug}]\",\"matching-subscription?[system-event :- {s\\/Keyword s\\/Any} event-subscription :- {s\\/Keyword s\\/Any}]\",\"find-subscribers[GraphQLSubscription]\",\"subscription-results[QueryResponse]\",\"schema-error[errors :- [{s\\/Keyword s\\/Any}]]\",\"validate[registration :- Registration team-id :- s\\/Str]\",\"get-value[config-keys & default]\",\"init-transformations[]\",\"perform-transformations[thingy :- {s\\/Keyword s\\/Any} tipe :- s\\/Keyword][thingy :- {s\\/Keyword s\\/Any} tipe :- s\\/Keyword event :- (s\\/maybe AtLeastTeamId)]\",\"transform-response[response :- {s\\/Keyword s\\/Any} query :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"root-field[query :- {s\\/Keyword s\\/Any}]\",\"operation-name[subscription :- s\\/Any]\",\"parse-graphql[query :- (s\\/maybe s\\/Str)]\",\"fill-variables[query :- {s\\/Keyword s\\/Any} variables :- (s\\/maybe {s\\/Keyword s\\/Any})]\",\"run-internal-query[query :- {s\\/Keyword s\\/Any}][query :- {s\\/Keyword s\\/Any} variables :- (s\\/maybe s\\/Str)]\",\"neo-schema-query*[query :- {s\\/Keyword s\\/Any}]\",\"transform-neo-schema[team-id :- (s\\/maybe s\\/Str)]\",\"run-query[query :- {s\\/Keyword s\\/Any}][query :- {s\\/Keyword s\\/Any} variables :- (s\\/maybe {s\\/Keyword s\\/Any})][parsed :- {s\\/Keyword s\\/Any} variables :- (s\\/maybe {s\\/Keyword s\\/Any}) {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"alumbra-error->graphql[error :- {s\\/Keyword s\\/Any}]\",\"graphql-error[message :- s\\/Str code :- s\\/Num]\",\"schema-error[info :- {s\\/Keyword s\\/Any}]\",\"handle-team-graphql[request]\",\"handle-graphql[request]\",\"sub-types[{s\\/Keyword s\\/Any}]\",\"object-types[{s\\/Keyword s\\/Any}]\",\"enum-types[{s\\/Keyword s\\/Any}]\",\"type->str[field-or-arg]\",\"field->str[field :- {s\\/Keyword s\\/Any}]\",\"object-type->str[tipe :- {s\\/Keyword s\\/Any}]\",\"enum->str[tipe :- {s\\/Keyword s\\/Any}]\",\"directive->str[directive :- {s\\/Keyword s\\/Any}]\",\"json-schema->idl*[json-schema :- {s\\/Keyword s\\/Any}]\",\"analyzed-schema*[neo-idl :- s\\/Str]\",\"validate-document*[neo-schema :- {s\\/Keyword s\\/Any} document :- {s\\/Keyword s\\/Any} variables :- {s\\/Str s\\/Any}]\",\"canonicalize-operation[query :- {s\\/Keyword s\\/Any} neo-schema :- {s\\/Keyword s\\/Any}][query :- {s\\/Keyword s\\/Any} neo-schema :- {s\\/Keyword s\\/Any} variables :- (s\\/maybe {s\\/Keyword s\\/Any})]\",\"query-zipper[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any}]\",\"visit-type[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any} type-name :- s\\/Str visitor-fn]\",\"^:results-transform remove-nulls[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"^:private custom-type[query :- (s\\/maybe {s\\/Keyword s\\/Any})]\",\"^:schema-transform fixup-schema[results :- {s\\/Keyword s\\/Any} event :- (s\\/maybe {s\\/Keyword s\\/Any})]\",\"^:query-transform transform-query[query :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"^:results-transform transform-response[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"^:schema-transform remove-mutations[results :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"^:schema-transform remove-team-id[results :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"^:query-transform ensure-team-id[query :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"^:results-transform strip-team-id[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"^:schema-transform fixup-schema[results :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"get-item![team-id :- s\\/Str]\",\"put-item[item]\",\"^:results-transform transform-response[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"^:query-transform transform-query[query :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"^:schema-transform remove-cypher-directives[results :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"^:schema-transform add-custom-directives[results :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"^:query-transform remove-directives[query :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"^:results-transform required-leaf-directive[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"^:results-transform required-array-directive[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"^:results-transform not-equals-directive[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"^:results-transform re-matches-directive[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"^:schema-transform fixup-schema[results :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"parse-properties[props :- s\\/Str]\",\"^:results-transform  transform-response[query :- {s\\/Keyword s\\/Any} response :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"^:query-transform transform-query[query :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"team-ingesters[team-id :- (s\\/maybe s\\/Str)]\",\"build-query[ingester :- Ingester]\",\"build-subscription[ingester :- Ingester]\",\"add-id-fields[ingester :- Ingester]\",\"^:schema-transform add-ingestion-schemata[schema :- {s\\/Keyword s\\/Any} {:keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"team-query[query-name :- s\\/Str team-id :- s\\/Str]\",\"team-type[type-name :- (s\\/maybe s\\/Str) team-id :- (s\\/maybe s\\/Str)]\",\"apply-query[selection :- s\\/Any full-response :- s\\/Any][selection :- s\\/Any full-response :- s\\/Any response :- s\\/Any]\",\"composite?[field :- {s\\/Keyword s\\/Any}]\",\"sha[edn :- s\\/Any]\",\"composite-key[s\\/Any]\",\"calculate-id[type-name :- s\\/Str event :- {s\\/Keyword s\\/Any}]\",\"^:query-transform build-response[query :- {s\\/Keyword s\\/Any} {:as event, :keys [team-id]} :- (s\\/maybe AtLeastTeamId)]\",\"mutation?[query :- {s\\/Keyword s\\/Any}]\",\"createSlackChannel[channel :- s\\/Str team-id :- s\\/Str]\",\"joinSlackChannel[channel-id :- s\\/Str team-id :- s\\/Str]\",\"linkSlackChannel[channel-id :- s\\/Str team-id :- s\\/Str repo :- s\\/Str owner :- s\\/Str provider-id :- s\\/Str]\",\"unlinkSlackChannel[channel-id :- s\\/Str team-id :- s\\/Str repo :- s\\/Str owner :- s\\/Str provider-id :- s\\/Str]\",\"inviteUserToSlackChannel[channel-id :- s\\/Str team-id :- s\\/Str user-id :- s\\/Str]\",\"^:schema-transform fixup-schema[results :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"^:schema-transform add-subscriptions[results :- {s\\/Keyword s\\/Any} event :- (s\\/maybe AtLeastTeamId)]\",\"^:query-transform add-node-id[query :- {s\\/Keyword s\\/Any} {:as event, :keys [id]} :- (s\\/maybe AtLeastTeamId)]\",\"process-event[event]\",\"parse-subs[reg]\",\"fetch-registrations[Registration]\",\"fetch-registrations*[]\",\"reset[state]\",\"all-registrations[]\",\"latest-registrations[registrations]\",\"refresh-registrations[]\",\"new-consumer[component topic handler][component topic handler group-id]\",\"new-producer[component topic]\",\"table*[table-name]\",\"creds*[]\",\"creds[]\",\"retryable-aws-error?[e]\",\"on-failed-attempt-fn[retry-same-cred]\",\"consistent-hash[edn]\",\"get-item[t m]\",\"update-item[t k update]\",\"with-timestamps[item]\",\"put-item[t item]\",\"delete-item[t m]\",\"query[t q & [opts]]\",\"scan[t]\",\"ensure-table[{table-name :table, :as table-spec, :keys [hash-keydef]}]\",\"ensure-tables[& [tables*]]\",\"stop-app[]\",\"-main[& args]\",\"unparse[document]\"]",
                "name": "public-defns"
              },
              {
                "sha": "bb990feb714a08d01298856358d0d65086bd10031ee82186dcd37413fa61485c",
                "data": null,
                "name": "build-config"
              },
              {
                "sha": "e033913517d87fed210801bd17efe9a6935975d273eccc4493ce46287b71744b",
                "data": "[[\"amazonica\",\"0.3.114\"],[\"analyzer\",\"0.1.17\"],[\"clj-config\",\"13.1.1-20170602194707\",\"exclusions\",[\"clojure\",\"slf4j-log4j12\"]],[\"clj-statsd\",\"0.4.0\"],[\"clj-utils\",\"0.0.8\"],[\"clojure\",\"1.8.0\"],[\"compojure\",\"1.6.0\"],[\"cprop\",\"0.1.11\"],[\"diehard\",\"0.6.0\"],[\"faraday\",\"1.9.0\",\"exclusions\",[\"nippy\",\"aws-java-sdk-dynamodb\"]],[\"hasch\",\"0.3.4\"],[\"jcl-over-slf4j\",\"1.7.25\"],[\"jul-to-slf4j\",\"1.7.25\"],[\"kafka-lib\",\"4.0.0\",\"exclusions\",[\"clojure\",\"slf4j-log4j12\",\"slf4j-api\"]],[\"log4j-over-slf4j\",\"1.7.25\"],[\"logback-classic\",\"1.2.3\"],[\"logging\",\"0.8.1\",\"exclusions\",[\"tools.logging\"]],[\"logzio-logback-appender\",\"1.0.16\"],[\"luminus-http-kit\",\"0.1.4\"],[\"mount\",\"0.1.11\"],[\"parser\",\"0.1.7\"],[\"ring-core\",\"1.6.2\"],[\"ring-cors\",\"0.1.11\"],[\"ring-defaults\",\"0.3.1\"],[\"ring-http-response\",\"0.9.0\"],[\"ring-middleware-format\",\"0.7.2\"],[\"slf4j-api\",\"1.7.25\"],[\"specter\",\"1.0.3\"],[\"validator\",\"0.2.1\"]]",
                "name": "project-deps"
              }
            ]
          }
        ]
      }
    ]
  },
  "extensions": {
    "type": "READ_ONLY",
    "operationName": null
  }
}